generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  userId            String   @unique
  email             String   @unique
  password          String
  refreshToken      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime?

  //REFERANS VERDİKLERİ
  oldSessions       OldSession[]
  liveSessions      LiveSession?
}

model Language {
  id                Int    @id @default(autoincrement())
  language          String @unique
  picturePath       String @unique

  //REFEREANS VERDİKLERİ
  oldSessions           OldSession[]
  books                 Book[]
  films                 Film[]
  flashcardCategories   FlashcardCategory[]
  words                 Word[]

  //BOTH
  practices         Practice[] @relation("LanguagePractices")
}

model Practice {
  id                Int @id @default(autoincrement())
  practice          String

  //REFERANS VERDİKLERİ
  oldSessions       OldSession[]

  //BOTH
  languages         Language[]  @relation("LanguagePractices")
}

model Book {
  id                Int @id @default(autoincrement())
  languageId        Int
  bookName          String
  imagePath         String
  sourcePath        String
  
  //REFERANS ALDIKLARI
  language Language @relation(fields: [languageId], references: [id])
}

model Film {
  id                Int @id @default(autoincrement())
  languageId        Int
  filmName          String @unique
  imagePath         String @unique
  sourcePath        String

  //REFERANS ALDIKLARI
  language Language @relation(fields: [languageId], references: [id])
}

model FlashcardCategory {
  id                Int @id @default(autoincrement())
  languageId        Int
  categoryName          String @unique

  //REFERANS ALDIKLARI
  language Language @relation(fields: [languageId], references: [id])
}


model OldSession {
  id                Int @id @default(autoincrement())
  oldSessionId      String @unique
  userId            String
  languageId        Int
  practiceId        Int
  createdOn         DateTime @default(now())
  imagePath         String
  rate              Decimal

  //REFERANS VERDİKLERİ
  sentences         Sentence[]
  wordSessions      WordSession[]

  //REFERANS ALDIKLARI
  user User @relation(fields: [userId], references: [userId])
  language Language @relation(fields: [languageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  practice Practice @relation(fields: [practiceId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}


model LiveSession {
  id                Int @id @default(autoincrement())
  liveSessionId     String @unique
  userId            String @unique

  //REFERANS ALDIKLARI
  user User @relation(fields: [userId], references: [userId])
}

model Sentence {
  id                Int @id @default(autoincrement())
  oldSessionId      String
  original          String
  own               String
  translate         String
  similarity        Decimal

  //REFERANS ALDIKLARI
  oldSession OldSession @relation(fields: [oldSessionId], references:[oldSessionId])
}

model Word {
  id                Int @id @default(autoincrement())
  languageId        Int
  wordToLearn       String
  translatedWord    String

  //REFERANS ALDIKLARI
  language Language @relation(fields: [languageId], references:[id])
}

model WordSession {
  id                Int @id @default(autoincrement())
  oldSessionId      String
  word              String
  answer            String
  status            Boolean

  //REFERANS ALDIKLARI
  oldSession OldSession @relation(fields: [oldSessionId], references:[oldSessionId])
}